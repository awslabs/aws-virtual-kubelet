// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: vkvmagent/v0/bootstrap.proto

package vkvmagent_v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentBootstrapClient is the client API for AgentBootstrap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentBootstrapClient interface {
	GetAgentIdentity(ctx context.Context, in *GetAgentIdentityRequest, opts ...grpc.CallOption) (*GetAgentIdentityResponse, error)
	// The `LaunchAuthenticatedEndpoint` is one shot only, once it completes AgentBootstrap service gets torn down
	LaunchAuthenticatedEndpoint(ctx context.Context, in *LaunchAuthenticatedEndpointRequest, opts ...grpc.CallOption) (*LaunchAuthenticatedEndpointResponse, error)
}

type agentBootstrapClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentBootstrapClient(cc grpc.ClientConnInterface) AgentBootstrapClient {
	return &agentBootstrapClient{cc}
}

func (c *agentBootstrapClient) GetAgentIdentity(ctx context.Context, in *GetAgentIdentityRequest, opts ...grpc.CallOption) (*GetAgentIdentityResponse, error) {
	out := new(GetAgentIdentityResponse)
	err := c.cc.Invoke(ctx, "/vkvmagent.v0.AgentBootstrap/GetAgentIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentBootstrapClient) LaunchAuthenticatedEndpoint(ctx context.Context, in *LaunchAuthenticatedEndpointRequest, opts ...grpc.CallOption) (*LaunchAuthenticatedEndpointResponse, error) {
	out := new(LaunchAuthenticatedEndpointResponse)
	err := c.cc.Invoke(ctx, "/vkvmagent.v0.AgentBootstrap/LaunchAuthenticatedEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentBootstrapServer is the server API for AgentBootstrap service.
// All implementations must embed UnimplementedAgentBootstrapServer
// for forward compatibility
type AgentBootstrapServer interface {
	GetAgentIdentity(context.Context, *GetAgentIdentityRequest) (*GetAgentIdentityResponse, error)
	// The `LaunchAuthenticatedEndpoint` is one shot only, once it completes AgentBootstrap service gets torn down
	LaunchAuthenticatedEndpoint(context.Context, *LaunchAuthenticatedEndpointRequest) (*LaunchAuthenticatedEndpointResponse, error)
	mustEmbedUnimplementedAgentBootstrapServer()
}

// UnimplementedAgentBootstrapServer must be embedded to have forward compatible implementations.
type UnimplementedAgentBootstrapServer struct {
}

func (UnimplementedAgentBootstrapServer) GetAgentIdentity(context.Context, *GetAgentIdentityRequest) (*GetAgentIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentIdentity not implemented")
}
func (UnimplementedAgentBootstrapServer) LaunchAuthenticatedEndpoint(context.Context, *LaunchAuthenticatedEndpointRequest) (*LaunchAuthenticatedEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchAuthenticatedEndpoint not implemented")
}
func (UnimplementedAgentBootstrapServer) mustEmbedUnimplementedAgentBootstrapServer() {}

// UnsafeAgentBootstrapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentBootstrapServer will
// result in compilation errors.
type UnsafeAgentBootstrapServer interface {
	mustEmbedUnimplementedAgentBootstrapServer()
}

func RegisterAgentBootstrapServer(s grpc.ServiceRegistrar, srv AgentBootstrapServer) {
	s.RegisterService(&AgentBootstrap_ServiceDesc, srv)
}

func _AgentBootstrap_GetAgentIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentBootstrapServer).GetAgentIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vkvmagent.v0.AgentBootstrap/GetAgentIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentBootstrapServer).GetAgentIdentity(ctx, req.(*GetAgentIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentBootstrap_LaunchAuthenticatedEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchAuthenticatedEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentBootstrapServer).LaunchAuthenticatedEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vkvmagent.v0.AgentBootstrap/LaunchAuthenticatedEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentBootstrapServer).LaunchAuthenticatedEndpoint(ctx, req.(*LaunchAuthenticatedEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentBootstrap_ServiceDesc is the grpc.ServiceDesc for AgentBootstrap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentBootstrap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vkvmagent.v0.AgentBootstrap",
	HandlerType: (*AgentBootstrapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentIdentity",
			Handler:    _AgentBootstrap_GetAgentIdentity_Handler,
		},
		{
			MethodName: "LaunchAuthenticatedEndpoint",
			Handler:    _AgentBootstrap_LaunchAuthenticatedEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vkvmagent/v0/bootstrap.proto",
}
