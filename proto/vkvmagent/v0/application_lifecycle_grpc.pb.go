// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: vkvmagent/v0/application_lifecycle.proto

package vkvmagent_v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationLifecycleClient is the client API for ApplicationLifecycle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationLifecycleClient interface {
	LaunchApplication(ctx context.Context, in *LaunchApplicationRequest, opts ...grpc.CallOption) (*LaunchApplicationResponse, error)
	TerminateApplication(ctx context.Context, in *TerminateApplicationRequest, opts ...grpc.CallOption) (*TerminateApplicationResponse, error)
	CheckApplicationHealth(ctx context.Context, in *ApplicationHealthRequest, opts ...grpc.CallOption) (*ApplicationHealthResponse, error)
	WatchApplicationHealth(ctx context.Context, in *ApplicationHealthRequest, opts ...grpc.CallOption) (ApplicationLifecycle_WatchApplicationHealthClient, error)
}

type applicationLifecycleClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationLifecycleClient(cc grpc.ClientConnInterface) ApplicationLifecycleClient {
	return &applicationLifecycleClient{cc}
}

func (c *applicationLifecycleClient) LaunchApplication(ctx context.Context, in *LaunchApplicationRequest, opts ...grpc.CallOption) (*LaunchApplicationResponse, error) {
	out := new(LaunchApplicationResponse)
	err := c.cc.Invoke(ctx, "/vkvmagent.v0.ApplicationLifecycle/LaunchApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationLifecycleClient) TerminateApplication(ctx context.Context, in *TerminateApplicationRequest, opts ...grpc.CallOption) (*TerminateApplicationResponse, error) {
	out := new(TerminateApplicationResponse)
	err := c.cc.Invoke(ctx, "/vkvmagent.v0.ApplicationLifecycle/TerminateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationLifecycleClient) CheckApplicationHealth(ctx context.Context, in *ApplicationHealthRequest, opts ...grpc.CallOption) (*ApplicationHealthResponse, error) {
	out := new(ApplicationHealthResponse)
	err := c.cc.Invoke(ctx, "/vkvmagent.v0.ApplicationLifecycle/CheckApplicationHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationLifecycleClient) WatchApplicationHealth(ctx context.Context, in *ApplicationHealthRequest, opts ...grpc.CallOption) (ApplicationLifecycle_WatchApplicationHealthClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationLifecycle_ServiceDesc.Streams[0], "/vkvmagent.v0.ApplicationLifecycle/WatchApplicationHealth", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationLifecycleWatchApplicationHealthClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApplicationLifecycle_WatchApplicationHealthClient interface {
	Recv() (*ApplicationHealthResponse, error)
	grpc.ClientStream
}

type applicationLifecycleWatchApplicationHealthClient struct {
	grpc.ClientStream
}

func (x *applicationLifecycleWatchApplicationHealthClient) Recv() (*ApplicationHealthResponse, error) {
	m := new(ApplicationHealthResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApplicationLifecycleServer is the server API for ApplicationLifecycle service.
// All implementations must embed UnimplementedApplicationLifecycleServer
// for forward compatibility
type ApplicationLifecycleServer interface {
	LaunchApplication(context.Context, *LaunchApplicationRequest) (*LaunchApplicationResponse, error)
	TerminateApplication(context.Context, *TerminateApplicationRequest) (*TerminateApplicationResponse, error)
	CheckApplicationHealth(context.Context, *ApplicationHealthRequest) (*ApplicationHealthResponse, error)
	WatchApplicationHealth(*ApplicationHealthRequest, ApplicationLifecycle_WatchApplicationHealthServer) error
	mustEmbedUnimplementedApplicationLifecycleServer()
}

// UnimplementedApplicationLifecycleServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationLifecycleServer struct {
}

func (UnimplementedApplicationLifecycleServer) LaunchApplication(context.Context, *LaunchApplicationRequest) (*LaunchApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchApplication not implemented")
}
func (UnimplementedApplicationLifecycleServer) TerminateApplication(context.Context, *TerminateApplicationRequest) (*TerminateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateApplication not implemented")
}
func (UnimplementedApplicationLifecycleServer) CheckApplicationHealth(context.Context, *ApplicationHealthRequest) (*ApplicationHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckApplicationHealth not implemented")
}
func (UnimplementedApplicationLifecycleServer) WatchApplicationHealth(*ApplicationHealthRequest, ApplicationLifecycle_WatchApplicationHealthServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchApplicationHealth not implemented")
}
func (UnimplementedApplicationLifecycleServer) mustEmbedUnimplementedApplicationLifecycleServer() {}

// UnsafeApplicationLifecycleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationLifecycleServer will
// result in compilation errors.
type UnsafeApplicationLifecycleServer interface {
	mustEmbedUnimplementedApplicationLifecycleServer()
}

func RegisterApplicationLifecycleServer(s grpc.ServiceRegistrar, srv ApplicationLifecycleServer) {
	s.RegisterService(&ApplicationLifecycle_ServiceDesc, srv)
}

func _ApplicationLifecycle_LaunchApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationLifecycleServer).LaunchApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vkvmagent.v0.ApplicationLifecycle/LaunchApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationLifecycleServer).LaunchApplication(ctx, req.(*LaunchApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationLifecycle_TerminateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationLifecycleServer).TerminateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vkvmagent.v0.ApplicationLifecycle/TerminateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationLifecycleServer).TerminateApplication(ctx, req.(*TerminateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationLifecycle_CheckApplicationHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationLifecycleServer).CheckApplicationHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vkvmagent.v0.ApplicationLifecycle/CheckApplicationHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationLifecycleServer).CheckApplicationHealth(ctx, req.(*ApplicationHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationLifecycle_WatchApplicationHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplicationHealthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationLifecycleServer).WatchApplicationHealth(m, &applicationLifecycleWatchApplicationHealthServer{stream})
}

type ApplicationLifecycle_WatchApplicationHealthServer interface {
	Send(*ApplicationHealthResponse) error
	grpc.ServerStream
}

type applicationLifecycleWatchApplicationHealthServer struct {
	grpc.ServerStream
}

func (x *applicationLifecycleWatchApplicationHealthServer) Send(m *ApplicationHealthResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ApplicationLifecycle_ServiceDesc is the grpc.ServiceDesc for ApplicationLifecycle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationLifecycle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vkvmagent.v0.ApplicationLifecycle",
	HandlerType: (*ApplicationLifecycleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LaunchApplication",
			Handler:    _ApplicationLifecycle_LaunchApplication_Handler,
		},
		{
			MethodName: "TerminateApplication",
			Handler:    _ApplicationLifecycle_TerminateApplication_Handler,
		},
		{
			MethodName: "CheckApplicationHealth",
			Handler:    _ApplicationLifecycle_CheckApplicationHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchApplicationHealth",
			Handler:       _ApplicationLifecycle_WatchApplicationHealth_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vkvmagent/v0/application_lifecycle.proto",
}
