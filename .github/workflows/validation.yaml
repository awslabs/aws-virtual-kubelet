# This GitHub Actions workflow runs jobs appropriate for every push (regardless of pull request existence/status)

name: Validation
on:
  push:
    branches:
      - main
  pull_request:
env:
  GO_VERSION_CONSTRAINT: '^1.17.2'
  GOPPROXY: direct  # match local / restricted environment by avoiding proxy
  # URL of the repository
  REPO_URL: ${{ github.event.repository.html_url }}
  # URL to push status events to
  STATUS_URL: https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}
jobs:
  # Ensure formatting standards are met
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION_CONSTRAINT }}
      - name: Generate list of files that need formatted
        run: |
          echo 'FILES_TO_REFORMAT<<EOF' >> $GITHUB_ENV
          echo "$(gofmt -l . | grep -v vendor)" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Count files
        run: |
          echo "FILES_TO_REFORMAT_COUNT=$(echo '${{ env.FILES_TO_REFORMAT }}' | awk 'NF' | wc -l)" >> $GITHUB_ENV
      - name: Check file list
        run: |
          if [[ "${{ env.FILES_TO_REFORMAT_COUNT }}" -gt 0 ]]; then
            curl -s -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' ${STATUS_URL}\
              -d "{\
                \"state\": \"failure\",\
                \"description\": \"${FILES_TO_REFORMAT_COUNT} file(s) to reformat, see Details for list\",\
                \"target_url\": \"${REPO_URL}/actions/runs/${{ github.run_id }}?check_suite_focus=true\",\
                \"context\": \"go fmt\"\
              }"
            while IFS= read -r file; do
                echo "::error title=Reformat needed,file=${file}::${file} needs 'go fmt' applied"
            done <<< "${{ env.FILES_TO_REFORMAT }}"
          fi
  vet:
    # Verify that `go vet` doesn't find any issues
    name: Vet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION_CONSTRAINT }}
      - name: Vendor mods
        run: go mod vendor
      - name: Check go vet
        run: go vet -mod=vendor ./...
  test:
    # Run unit tests
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION_CONSTRAINT }}
      - name: Vendor mods
        run: go mod vendor
      - name: Collect packages to run tests for
        run: |
          echo 'PKGS_TO_TEST<<EOF' >> $GITHUB_ENV
          echo "$(go list ./... | grep -v mocks | tr '\n' ',')" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Run tests with race condition checking and test coverage output
        run: go test -race -coverpkg=${{ env.PKGS_TO_TEST }} -coverprofile=coverage.out -covermode=atomic  ./...
      - name: Collect total test coverage percentage
        run: |
          echo "TOTAL_COVERAGE=\
          $(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')" >> $GITHUB_ENV
      - name: Set badge color based on test coverage
        run: |
          # TODO make thresholds (and colors?) repo variables?
          if (( $(echo "${{ env.TOTAL_COVERAGE }} <= 30.0" | bc -l) )) ; then
            echo "COVERAGE_BADGE_COLOR=red" >> $GITHUB_ENV
          elif (( $(echo "${{ env.TOTAL_COVERAGE }} > 60.0" | bc -l) )); then
            echo "COVERAGE_BADGE_COLOR=green" >> $GITHUB_ENV
          else
            echo "COVERAGE_BADGE_COLOR=yellow" >> $GITHUB_ENV
          fi
      - name: Set test coverage badge data file name
        run: |
          # if we're in the default branch, use the default branch name for coverage data file
          # otherwise use the repo/branch node_id (simplifies filename scrubbing and later coverage comparison check)
          if [[ "${{ github.ref }}" == "refs/heads/${{ github.event.repository.default_branch }}" ]]; then
            echo "COVERAGE_BADGE_FILENAME=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV
          else
            echo "COVERAGE_BADGE_FILENAME=${{ github.event.repository.node_id }}" >> $GITHUB_ENV
          fi
      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 2f400d09b8deb931da6f1d498aba8c07
          filename: test.json
          label: Hello
          message: World
          color: orange
      - name: Get default branch coverage
        if: ${{ github.event.pull_request.base.ref == github.event.repository.default_branch }}
        # uncomment the next line (and comment the above) to switch to only checking declining coverage in non-fork repo
        # if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == github.event.repository.default_branch && github.event.repository.fork == 'false' }}
        run: |
          echo "DEFAULT_BRANCH_COVERAGE=$(curl -s -H 'Authorization: Bearer ${{ secrets.BADGE_GIST_TOKEN }}'\
            https://gist.githubusercontent.com/jguice/${{ secrets.BADGE_GIST_ID }}/raw/${{ github.event.repository.default_branch }}.json | jq '.message')" >> $GITHUB_ENV
