// Code generated by MockGen. DO NOT EDIT.
// Source: proto/vkvmagent/v0/application_lifecycle_grpc.pb.go

// Package mock_vkvmagent_v0 is a generated GoMock package.
package mock_vkvmagent_v0

import (
	context "context"
	reflect "reflect"

	vkvmagent_v0 "github.com/aws/aws-virtual-kubelet/proto/vkvmagent/v0"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockApplicationLifecycleClient is a mock of ApplicationLifecycleClient interface.
type MockApplicationLifecycleClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationLifecycleClientMockRecorder
}

// MockApplicationLifecycleClientMockRecorder is the mock recorder for MockApplicationLifecycleClient.
type MockApplicationLifecycleClientMockRecorder struct {
	mock *MockApplicationLifecycleClient
}

// NewMockApplicationLifecycleClient creates a new mock instance.
func NewMockApplicationLifecycleClient(ctrl *gomock.Controller) *MockApplicationLifecycleClient {
	mock := &MockApplicationLifecycleClient{ctrl: ctrl}
	mock.recorder = &MockApplicationLifecycleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationLifecycleClient) EXPECT() *MockApplicationLifecycleClientMockRecorder {
	return m.recorder
}

// CheckApplicationHealth mocks base method.
func (m *MockApplicationLifecycleClient) CheckApplicationHealth(ctx context.Context, in *vkvmagent_v0.ApplicationHealthRequest, opts ...grpc.CallOption) (*vkvmagent_v0.ApplicationHealthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckApplicationHealth", varargs...)
	ret0, _ := ret[0].(*vkvmagent_v0.ApplicationHealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckApplicationHealth indicates an expected call of CheckApplicationHealth.
func (mr *MockApplicationLifecycleClientMockRecorder) CheckApplicationHealth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckApplicationHealth", reflect.TypeOf((*MockApplicationLifecycleClient)(nil).CheckApplicationHealth), varargs...)
}

// LaunchApplication mocks base method.
func (m *MockApplicationLifecycleClient) LaunchApplication(ctx context.Context, in *vkvmagent_v0.LaunchApplicationRequest, opts ...grpc.CallOption) (*vkvmagent_v0.LaunchApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LaunchApplication", varargs...)
	ret0, _ := ret[0].(*vkvmagent_v0.LaunchApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchApplication indicates an expected call of LaunchApplication.
func (mr *MockApplicationLifecycleClientMockRecorder) LaunchApplication(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchApplication", reflect.TypeOf((*MockApplicationLifecycleClient)(nil).LaunchApplication), varargs...)
}

// TerminateApplication mocks base method.
func (m *MockApplicationLifecycleClient) TerminateApplication(ctx context.Context, in *vkvmagent_v0.TerminateApplicationRequest, opts ...grpc.CallOption) (*vkvmagent_v0.TerminateApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TerminateApplication", varargs...)
	ret0, _ := ret[0].(*vkvmagent_v0.TerminateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateApplication indicates an expected call of TerminateApplication.
func (mr *MockApplicationLifecycleClientMockRecorder) TerminateApplication(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateApplication", reflect.TypeOf((*MockApplicationLifecycleClient)(nil).TerminateApplication), varargs...)
}

// WatchApplicationHealth mocks base method.
func (m *MockApplicationLifecycleClient) WatchApplicationHealth(ctx context.Context, in *vkvmagent_v0.ApplicationHealthRequest, opts ...grpc.CallOption) (vkvmagent_v0.ApplicationLifecycle_WatchApplicationHealthClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchApplicationHealth", varargs...)
	ret0, _ := ret[0].(vkvmagent_v0.ApplicationLifecycle_WatchApplicationHealthClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationHealth indicates an expected call of WatchApplicationHealth.
func (mr *MockApplicationLifecycleClientMockRecorder) WatchApplicationHealth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationHealth", reflect.TypeOf((*MockApplicationLifecycleClient)(nil).WatchApplicationHealth), varargs...)
}

// MockApplicationLifecycle_WatchApplicationHealthClient is a mock of ApplicationLifecycle_WatchApplicationHealthClient interface.
type MockApplicationLifecycle_WatchApplicationHealthClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder
}

// MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder is the mock recorder for MockApplicationLifecycle_WatchApplicationHealthClient.
type MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder struct {
	mock *MockApplicationLifecycle_WatchApplicationHealthClient
}

// NewMockApplicationLifecycle_WatchApplicationHealthClient creates a new mock instance.
func NewMockApplicationLifecycle_WatchApplicationHealthClient(ctrl *gomock.Controller) *MockApplicationLifecycle_WatchApplicationHealthClient {
	mock := &MockApplicationLifecycle_WatchApplicationHealthClient{ctrl: ctrl}
	mock.recorder = &MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationLifecycle_WatchApplicationHealthClient) EXPECT() *MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthClient)(nil).Context))
}

// Header mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthClient) Recv() (*vkvmagent_v0.ApplicationHealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*vkvmagent_v0.ApplicationHealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockApplicationLifecycle_WatchApplicationHealthClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockApplicationLifecycle_WatchApplicationHealthClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockApplicationLifecycle_WatchApplicationHealthClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthClient)(nil).Trailer))
}

// MockApplicationLifecycleServer is a mock of ApplicationLifecycleServer interface.
type MockApplicationLifecycleServer struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationLifecycleServerMockRecorder
}

// MockApplicationLifecycleServerMockRecorder is the mock recorder for MockApplicationLifecycleServer.
type MockApplicationLifecycleServerMockRecorder struct {
	mock *MockApplicationLifecycleServer
}

// NewMockApplicationLifecycleServer creates a new mock instance.
func NewMockApplicationLifecycleServer(ctrl *gomock.Controller) *MockApplicationLifecycleServer {
	mock := &MockApplicationLifecycleServer{ctrl: ctrl}
	mock.recorder = &MockApplicationLifecycleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationLifecycleServer) EXPECT() *MockApplicationLifecycleServerMockRecorder {
	return m.recorder
}

// CheckApplicationHealth mocks base method.
func (m *MockApplicationLifecycleServer) CheckApplicationHealth(arg0 context.Context, arg1 *vkvmagent_v0.ApplicationHealthRequest) (*vkvmagent_v0.ApplicationHealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckApplicationHealth", arg0, arg1)
	ret0, _ := ret[0].(*vkvmagent_v0.ApplicationHealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckApplicationHealth indicates an expected call of CheckApplicationHealth.
func (mr *MockApplicationLifecycleServerMockRecorder) CheckApplicationHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckApplicationHealth", reflect.TypeOf((*MockApplicationLifecycleServer)(nil).CheckApplicationHealth), arg0, arg1)
}

// LaunchApplication mocks base method.
func (m *MockApplicationLifecycleServer) LaunchApplication(arg0 context.Context, arg1 *vkvmagent_v0.LaunchApplicationRequest) (*vkvmagent_v0.LaunchApplicationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchApplication", arg0, arg1)
	ret0, _ := ret[0].(*vkvmagent_v0.LaunchApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchApplication indicates an expected call of LaunchApplication.
func (mr *MockApplicationLifecycleServerMockRecorder) LaunchApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchApplication", reflect.TypeOf((*MockApplicationLifecycleServer)(nil).LaunchApplication), arg0, arg1)
}

// TerminateApplication mocks base method.
func (m *MockApplicationLifecycleServer) TerminateApplication(arg0 context.Context, arg1 *vkvmagent_v0.TerminateApplicationRequest) (*vkvmagent_v0.TerminateApplicationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateApplication", arg0, arg1)
	ret0, _ := ret[0].(*vkvmagent_v0.TerminateApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateApplication indicates an expected call of TerminateApplication.
func (mr *MockApplicationLifecycleServerMockRecorder) TerminateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateApplication", reflect.TypeOf((*MockApplicationLifecycleServer)(nil).TerminateApplication), arg0, arg1)
}

// WatchApplicationHealth mocks base method.
func (m *MockApplicationLifecycleServer) WatchApplicationHealth(arg0 *vkvmagent_v0.ApplicationHealthRequest, arg1 vkvmagent_v0.ApplicationLifecycle_WatchApplicationHealthServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationHealth", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchApplicationHealth indicates an expected call of WatchApplicationHealth.
func (mr *MockApplicationLifecycleServerMockRecorder) WatchApplicationHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationHealth", reflect.TypeOf((*MockApplicationLifecycleServer)(nil).WatchApplicationHealth), arg0, arg1)
}

// mustEmbedUnimplementedApplicationLifecycleServer mocks base method.
func (m *MockApplicationLifecycleServer) mustEmbedUnimplementedApplicationLifecycleServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedApplicationLifecycleServer")
}

// mustEmbedUnimplementedApplicationLifecycleServer indicates an expected call of mustEmbedUnimplementedApplicationLifecycleServer.
func (mr *MockApplicationLifecycleServerMockRecorder) mustEmbedUnimplementedApplicationLifecycleServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedApplicationLifecycleServer", reflect.TypeOf((*MockApplicationLifecycleServer)(nil).mustEmbedUnimplementedApplicationLifecycleServer))
}

// MockUnsafeApplicationLifecycleServer is a mock of UnsafeApplicationLifecycleServer interface.
type MockUnsafeApplicationLifecycleServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeApplicationLifecycleServerMockRecorder
}

// MockUnsafeApplicationLifecycleServerMockRecorder is the mock recorder for MockUnsafeApplicationLifecycleServer.
type MockUnsafeApplicationLifecycleServerMockRecorder struct {
	mock *MockUnsafeApplicationLifecycleServer
}

// NewMockUnsafeApplicationLifecycleServer creates a new mock instance.
func NewMockUnsafeApplicationLifecycleServer(ctrl *gomock.Controller) *MockUnsafeApplicationLifecycleServer {
	mock := &MockUnsafeApplicationLifecycleServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeApplicationLifecycleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeApplicationLifecycleServer) EXPECT() *MockUnsafeApplicationLifecycleServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedApplicationLifecycleServer mocks base method.
func (m *MockUnsafeApplicationLifecycleServer) mustEmbedUnimplementedApplicationLifecycleServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedApplicationLifecycleServer")
}

// mustEmbedUnimplementedApplicationLifecycleServer indicates an expected call of mustEmbedUnimplementedApplicationLifecycleServer.
func (mr *MockUnsafeApplicationLifecycleServerMockRecorder) mustEmbedUnimplementedApplicationLifecycleServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedApplicationLifecycleServer", reflect.TypeOf((*MockUnsafeApplicationLifecycleServer)(nil).mustEmbedUnimplementedApplicationLifecycleServer))
}

// MockApplicationLifecycle_WatchApplicationHealthServer is a mock of ApplicationLifecycle_WatchApplicationHealthServer interface.
type MockApplicationLifecycle_WatchApplicationHealthServer struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder
}

// MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder is the mock recorder for MockApplicationLifecycle_WatchApplicationHealthServer.
type MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder struct {
	mock *MockApplicationLifecycle_WatchApplicationHealthServer
}

// NewMockApplicationLifecycle_WatchApplicationHealthServer creates a new mock instance.
func NewMockApplicationLifecycle_WatchApplicationHealthServer(ctrl *gomock.Controller) *MockApplicationLifecycle_WatchApplicationHealthServer {
	mock := &MockApplicationLifecycle_WatchApplicationHealthServer{ctrl: ctrl}
	mock.recorder = &MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationLifecycle_WatchApplicationHealthServer) EXPECT() *MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockApplicationLifecycle_WatchApplicationHealthServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthServer) Send(arg0 *vkvmagent_v0.ApplicationHealthResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockApplicationLifecycle_WatchApplicationHealthServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockApplicationLifecycle_WatchApplicationHealthServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockApplicationLifecycle_WatchApplicationHealthServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockApplicationLifecycle_WatchApplicationHealthServer)(nil).SetTrailer), arg0)
}
