// Code generated by MockGen. DO NOT EDIT.
// Source: proto/grpc/health/v1/health_grpc.pb.go

// Package mock_grpc_health_v1 is a generated GoMock package.
package mock_grpc_health_v1

import (
	context "context"
	reflect "reflect"

	grpc_health_v1 "github.com/aws/aws-virtual-kubelet/proto/grpc/health/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockHealthClient is a mock of HealthClient interface.
type MockHealthClient struct {
	ctrl     *gomock.Controller
	recorder *MockHealthClientMockRecorder
}

// MockHealthClientMockRecorder is the mock recorder for MockHealthClient.
type MockHealthClientMockRecorder struct {
	mock *MockHealthClient
}

// NewMockHealthClient creates a new mock instance.
func NewMockHealthClient(ctrl *gomock.Controller) *MockHealthClient {
	mock := &MockHealthClient{ctrl: ctrl}
	mock.recorder = &MockHealthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthClient) EXPECT() *MockHealthClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockHealthClient) Check(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (*grpc_health_v1.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*grpc_health_v1.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockHealthClientMockRecorder) Check(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHealthClient)(nil).Check), varargs...)
}

// Watch mocks base method.
func (m *MockHealthClient) Watch(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (grpc_health_v1.Health_WatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(grpc_health_v1.Health_WatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockHealthClientMockRecorder) Watch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockHealthClient)(nil).Watch), varargs...)
}

// MockHealth_WatchClient is a mock of Health_WatchClient interface.
type MockHealth_WatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockHealth_WatchClientMockRecorder
}

// MockHealth_WatchClientMockRecorder is the mock recorder for MockHealth_WatchClient.
type MockHealth_WatchClientMockRecorder struct {
	mock *MockHealth_WatchClient
}

// NewMockHealth_WatchClient creates a new mock instance.
func NewMockHealth_WatchClient(ctrl *gomock.Controller) *MockHealth_WatchClient {
	mock := &MockHealth_WatchClient{ctrl: ctrl}
	mock.recorder = &MockHealth_WatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealth_WatchClient) EXPECT() *MockHealth_WatchClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockHealth_WatchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockHealth_WatchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockHealth_WatchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockHealth_WatchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockHealth_WatchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHealth_WatchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockHealth_WatchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockHealth_WatchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockHealth_WatchClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockHealth_WatchClient) Recv() (*grpc_health_v1.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*grpc_health_v1.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockHealth_WatchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockHealth_WatchClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockHealth_WatchClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockHealth_WatchClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHealth_WatchClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockHealth_WatchClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockHealth_WatchClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHealth_WatchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockHealth_WatchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockHealth_WatchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockHealth_WatchClient)(nil).Trailer))
}

// MockHealthServer is a mock of HealthServer interface.
type MockHealthServer struct {
	ctrl     *gomock.Controller
	recorder *MockHealthServerMockRecorder
}

// MockHealthServerMockRecorder is the mock recorder for MockHealthServer.
type MockHealthServerMockRecorder struct {
	mock *MockHealthServer
}

// NewMockHealthServer creates a new mock instance.
func NewMockHealthServer(ctrl *gomock.Controller) *MockHealthServer {
	mock := &MockHealthServer{ctrl: ctrl}
	mock.recorder = &MockHealthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthServer) EXPECT() *MockHealthServerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockHealthServer) Check(arg0 context.Context, arg1 *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*grpc_health_v1.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockHealthServerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHealthServer)(nil).Check), arg0, arg1)
}

// Watch mocks base method.
func (m *MockHealthServer) Watch(arg0 *grpc_health_v1.HealthCheckRequest, arg1 grpc_health_v1.Health_WatchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockHealthServerMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockHealthServer)(nil).Watch), arg0, arg1)
}

// mustEmbedUnimplementedHealthServer mocks base method.
func (m *MockHealthServer) mustEmbedUnimplementedHealthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthServer")
}

// mustEmbedUnimplementedHealthServer indicates an expected call of mustEmbedUnimplementedHealthServer.
func (mr *MockHealthServerMockRecorder) mustEmbedUnimplementedHealthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthServer", reflect.TypeOf((*MockHealthServer)(nil).mustEmbedUnimplementedHealthServer))
}

// MockUnsafeHealthServer is a mock of UnsafeHealthServer interface.
type MockUnsafeHealthServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHealthServerMockRecorder
}

// MockUnsafeHealthServerMockRecorder is the mock recorder for MockUnsafeHealthServer.
type MockUnsafeHealthServerMockRecorder struct {
	mock *MockUnsafeHealthServer
}

// NewMockUnsafeHealthServer creates a new mock instance.
func NewMockUnsafeHealthServer(ctrl *gomock.Controller) *MockUnsafeHealthServer {
	mock := &MockUnsafeHealthServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHealthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHealthServer) EXPECT() *MockUnsafeHealthServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHealthServer mocks base method.
func (m *MockUnsafeHealthServer) mustEmbedUnimplementedHealthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthServer")
}

// mustEmbedUnimplementedHealthServer indicates an expected call of mustEmbedUnimplementedHealthServer.
func (mr *MockUnsafeHealthServerMockRecorder) mustEmbedUnimplementedHealthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthServer", reflect.TypeOf((*MockUnsafeHealthServer)(nil).mustEmbedUnimplementedHealthServer))
}

// MockHealth_WatchServer is a mock of Health_WatchServer interface.
type MockHealth_WatchServer struct {
	ctrl     *gomock.Controller
	recorder *MockHealth_WatchServerMockRecorder
}

// MockHealth_WatchServerMockRecorder is the mock recorder for MockHealth_WatchServer.
type MockHealth_WatchServerMockRecorder struct {
	mock *MockHealth_WatchServer
}

// NewMockHealth_WatchServer creates a new mock instance.
func NewMockHealth_WatchServer(ctrl *gomock.Controller) *MockHealth_WatchServer {
	mock := &MockHealth_WatchServer{ctrl: ctrl}
	mock.recorder = &MockHealth_WatchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealth_WatchServer) EXPECT() *MockHealth_WatchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockHealth_WatchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockHealth_WatchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockHealth_WatchServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockHealth_WatchServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockHealth_WatchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockHealth_WatchServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockHealth_WatchServer) Send(arg0 *grpc_health_v1.HealthCheckResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockHealth_WatchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockHealth_WatchServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockHealth_WatchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockHealth_WatchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockHealth_WatchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockHealth_WatchServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockHealth_WatchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockHealth_WatchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockHealth_WatchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockHealth_WatchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockHealth_WatchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockHealth_WatchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockHealth_WatchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockHealth_WatchServer)(nil).SetTrailer), arg0)
}
