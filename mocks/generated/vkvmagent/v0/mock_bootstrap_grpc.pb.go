// Code generated by MockGen. DO NOT EDIT.
// Source: proto/vkvmagent/v0/bootstrap_grpc.pb.go

// Package mock_vkvmagent_v0 is a generated GoMock package.
package mock_vkvmagent_v0

import (
	context "context"
	reflect "reflect"

	vkvmagent_v0 "github.com/aws/aws-virtual-kubelet/proto/vkvmagent/v0"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAgentBootstrapClient is a mock of AgentBootstrapClient interface.
type MockAgentBootstrapClient struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBootstrapClientMockRecorder
}

// MockAgentBootstrapClientMockRecorder is the mock recorder for MockAgentBootstrapClient.
type MockAgentBootstrapClientMockRecorder struct {
	mock *MockAgentBootstrapClient
}

// NewMockAgentBootstrapClient creates a new mock instance.
func NewMockAgentBootstrapClient(ctrl *gomock.Controller) *MockAgentBootstrapClient {
	mock := &MockAgentBootstrapClient{ctrl: ctrl}
	mock.recorder = &MockAgentBootstrapClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBootstrapClient) EXPECT() *MockAgentBootstrapClientMockRecorder {
	return m.recorder
}

// GetAgentIdentity mocks base method.
func (m *MockAgentBootstrapClient) GetAgentIdentity(ctx context.Context, in *vkvmagent_v0.GetAgentIdentityRequest, opts ...grpc.CallOption) (*vkvmagent_v0.GetAgentIdentityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentIdentity", varargs...)
	ret0, _ := ret[0].(*vkvmagent_v0.GetAgentIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentIdentity indicates an expected call of GetAgentIdentity.
func (mr *MockAgentBootstrapClientMockRecorder) GetAgentIdentity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentIdentity", reflect.TypeOf((*MockAgentBootstrapClient)(nil).GetAgentIdentity), varargs...)
}

// LaunchAuthenticatedEndpoint mocks base method.
func (m *MockAgentBootstrapClient) LaunchAuthenticatedEndpoint(ctx context.Context, in *vkvmagent_v0.LaunchAuthenticatedEndpointRequest, opts ...grpc.CallOption) (*vkvmagent_v0.LaunchAuthenticatedEndpointResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LaunchAuthenticatedEndpoint", varargs...)
	ret0, _ := ret[0].(*vkvmagent_v0.LaunchAuthenticatedEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchAuthenticatedEndpoint indicates an expected call of LaunchAuthenticatedEndpoint.
func (mr *MockAgentBootstrapClientMockRecorder) LaunchAuthenticatedEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchAuthenticatedEndpoint", reflect.TypeOf((*MockAgentBootstrapClient)(nil).LaunchAuthenticatedEndpoint), varargs...)
}

// MockAgentBootstrapServer is a mock of AgentBootstrapServer interface.
type MockAgentBootstrapServer struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBootstrapServerMockRecorder
}

// MockAgentBootstrapServerMockRecorder is the mock recorder for MockAgentBootstrapServer.
type MockAgentBootstrapServerMockRecorder struct {
	mock *MockAgentBootstrapServer
}

// NewMockAgentBootstrapServer creates a new mock instance.
func NewMockAgentBootstrapServer(ctrl *gomock.Controller) *MockAgentBootstrapServer {
	mock := &MockAgentBootstrapServer{ctrl: ctrl}
	mock.recorder = &MockAgentBootstrapServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBootstrapServer) EXPECT() *MockAgentBootstrapServerMockRecorder {
	return m.recorder
}

// GetAgentIdentity mocks base method.
func (m *MockAgentBootstrapServer) GetAgentIdentity(arg0 context.Context, arg1 *vkvmagent_v0.GetAgentIdentityRequest) (*vkvmagent_v0.GetAgentIdentityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentIdentity", arg0, arg1)
	ret0, _ := ret[0].(*vkvmagent_v0.GetAgentIdentityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentIdentity indicates an expected call of GetAgentIdentity.
func (mr *MockAgentBootstrapServerMockRecorder) GetAgentIdentity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentIdentity", reflect.TypeOf((*MockAgentBootstrapServer)(nil).GetAgentIdentity), arg0, arg1)
}

// LaunchAuthenticatedEndpoint mocks base method.
func (m *MockAgentBootstrapServer) LaunchAuthenticatedEndpoint(arg0 context.Context, arg1 *vkvmagent_v0.LaunchAuthenticatedEndpointRequest) (*vkvmagent_v0.LaunchAuthenticatedEndpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchAuthenticatedEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*vkvmagent_v0.LaunchAuthenticatedEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchAuthenticatedEndpoint indicates an expected call of LaunchAuthenticatedEndpoint.
func (mr *MockAgentBootstrapServerMockRecorder) LaunchAuthenticatedEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchAuthenticatedEndpoint", reflect.TypeOf((*MockAgentBootstrapServer)(nil).LaunchAuthenticatedEndpoint), arg0, arg1)
}

// mustEmbedUnimplementedAgentBootstrapServer mocks base method.
func (m *MockAgentBootstrapServer) mustEmbedUnimplementedAgentBootstrapServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentBootstrapServer")
}

// mustEmbedUnimplementedAgentBootstrapServer indicates an expected call of mustEmbedUnimplementedAgentBootstrapServer.
func (mr *MockAgentBootstrapServerMockRecorder) mustEmbedUnimplementedAgentBootstrapServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentBootstrapServer", reflect.TypeOf((*MockAgentBootstrapServer)(nil).mustEmbedUnimplementedAgentBootstrapServer))
}

// MockUnsafeAgentBootstrapServer is a mock of UnsafeAgentBootstrapServer interface.
type MockUnsafeAgentBootstrapServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAgentBootstrapServerMockRecorder
}

// MockUnsafeAgentBootstrapServerMockRecorder is the mock recorder for MockUnsafeAgentBootstrapServer.
type MockUnsafeAgentBootstrapServerMockRecorder struct {
	mock *MockUnsafeAgentBootstrapServer
}

// NewMockUnsafeAgentBootstrapServer creates a new mock instance.
func NewMockUnsafeAgentBootstrapServer(ctrl *gomock.Controller) *MockUnsafeAgentBootstrapServer {
	mock := &MockUnsafeAgentBootstrapServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAgentBootstrapServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAgentBootstrapServer) EXPECT() *MockUnsafeAgentBootstrapServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAgentBootstrapServer mocks base method.
func (m *MockUnsafeAgentBootstrapServer) mustEmbedUnimplementedAgentBootstrapServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAgentBootstrapServer")
}

// mustEmbedUnimplementedAgentBootstrapServer indicates an expected call of mustEmbedUnimplementedAgentBootstrapServer.
func (mr *MockUnsafeAgentBootstrapServerMockRecorder) mustEmbedUnimplementedAgentBootstrapServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAgentBootstrapServer", reflect.TypeOf((*MockUnsafeAgentBootstrapServer)(nil).mustEmbedUnimplementedAgentBootstrapServer))
}
